{"version":3,"sources":["App.js","index.js"],"names":["createData","Title","Year","imdbID","useStyles","makeStyles","theme","root","flexShrink","marginLeft","spacing","rows","App","useState","search","setSearch","movie","setMovie","movieInstance","setMovieInstance","pageNumber","setPageNumber","visible","setVisible","rowsPerPage","setRowsPerPage","nextPageData","setNextPageData","prevSearch","value","ref","useRef","useEffect","current","usePrevious","API_KEY","url","getMovie","e","axios","get","then","res","data","Search","length","response","i","push","increasePage","decreasePage","handleChangeRowsPerPage","event","parseInt","target","TablePaginationActions","classes","useTheme","className","IconButton","onClick","disabled","aria-label","direction","checkData","Response","Box","display","flexDirection","justifyContent","TableContainer","Table","component","Paper","TableHead","TableRow","TableCell","componenet","scope","style","width","align","TableBody","slice","map","row","hover","handleRowClick","TableFooter","TablePagination","rowsPerPageOptions","label","count","page","onChangeRowsPerPage","ActionsComponent","src","Poster","alt","Genre","Director","Rated","imdbRating","BoxOffice","type","placeholder","onKeyPress","key","onChange","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1a916077.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\r\nimport './App.css';\r\nimport axios from \"axios\";\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper'; \r\nimport { TablePagination } from '@material-ui/core';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nfunction createData(Title, Year, imdbID) {      \r\n    return {Title, Year, imdbID}\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexShrink: 0,\r\n      marginLeft: theme.spacing(2.5),\r\n    },\r\n  }));\r\n\r\nlet rows = [];\r\n\r\nfunction App(){\r\n    const [search, setSearch] = useState('');\r\n    const [movie, setMovie] = useState({});\r\n    const [movieInstance, setMovieInstance] = useState({});\r\n    const [pageNumber, setPageNumber] = useState(1);\r\n    const [visible, setVisible] = useState(true);\r\n    const [rowsPerPage, setRowsPerPage] = useState(10);\r\n    const [nextPageData, setNextPageData] = useState(true);\r\n    const prevSearch = usePrevious(search)\r\n    const API_KEY = \"7c60f5fa\"\r\n    const url = `https://www.omdbapi.com/?s=${search}&type=movie&page=${pageNumber}&apikey=${API_KEY}`;\r\n   \r\n\r\n    const getMovie = e => {         //this calls the api again with a new page number every time it changes due to useeffect calling it\r\n        setNextPageData(true);\r\n        setVisible(true);\r\n        if (rowsPerPage === 10){  \r\n            axios.get(`https://www.omdbapi.com/?s=${search}&type=movie&page=${pageNumber+1}&apikey=${API_KEY}`)  //checks if the next page contains any movies in order to disable increasePage\r\n                .then(res => {\r\n                    if(res == null || res.data == null || res.data.Search == null){\r\n                        setNextPageData(false);\r\n                    }\r\n                })\r\n\r\n            if (((rows.length/rowsPerPage) >= pageNumber) && (search === prevSearch)){   \r\n                return; \r\n            }\r\n            axios.get(url)      \r\n                .then(response => {\r\n                    if(response == null || response.data == null || response.data.Search == null) return;\r\n                        for(let i = 0; i < response.data.Search.length; i++){\r\n                            rows.push(createData(response.data.Search[i].Title, response.data.Search[i].Year, response.data.Search[i].imdbID));\r\n                        }\r\n                    setMovie(response.data);\r\n                });\r\n            }\r\n\r\n        if (rowsPerPage === 5){                                    \r\n            axios.get(`https://www.omdbapi.com/?s=${search}&type=movie&page=${((pageNumber+2)/2)}&apikey=${API_KEY}`)  //checks next available page in pagination of 5 \r\n                .then(res => {\r\n                    if(res == null || res.data == null || res.data.Search == null){\r\n                        setNextPageData(false);\r\n                    }\r\n                })\r\n            if (((rows.length/rowsPerPage) >= pageNumber) && (search === prevSearch)){   \r\n                return; \r\n            }\r\n            axios.get(`https://www.omdbapi.com/?s=${search}&type=movie&page=${(pageNumber+1)/2}&apikey=${API_KEY}`)      \r\n                .then(response => {\r\n                    if(response == null || response.data == null || response.data.Search == null) return;\r\n                        for(let i = 0; i < response.data.Search.length; i++){\r\n                            rows.push(createData(response.data.Search[i].Title, response.data.Search[i].Year, response.data.Search[i].imdbID));\r\n                        }\r\n                    setMovie(response.data);\r\n                });\r\n        }\r\n    }\r\n\r\n    function increasePage(){\r\n        if(pageNumber >= 100 || nextPageData === false){\r\n            return;\r\n        }\r\n        else{\r\n            setPageNumber(pageNumber => pageNumber + 1);\r\n        }  \r\n    }\r\n\r\n    function decreasePage(){\r\n        if(pageNumber === 1){\r\n            return;\r\n        }\r\n        setPageNumber(pageNumber => pageNumber - 1);  \r\n    }\r\n\r\n    function handleRowClick(event, row){    //when clicking on a movie, gets the specific movie data and replaces the table\r\n        setVisible(false);\r\n        axios.get(`https://www.omdbapi.com/?i=${row.imdbID}&apikey=7c60f5fa`)\r\n            .then(res => {\r\n                setMovieInstance(res.data);\r\n            })\r\n    }\r\n\r\n    const handleChangeRowsPerPage = (event) => {            //changes the number of rows per page \r\n        setRowsPerPage(parseInt(event.target.value, 10))\r\n        setPageNumber(1);\r\n    }\r\n\r\n    useEffect(() => {\r\n        checkData(movieInstance);\r\n    }, [movieInstance]);\r\n\r\n    useEffect(() => {   //calls getMovie every time the page number changes, showing a new list\r\n        getMovie();\r\n    }, [pageNumber]);   \r\n\r\n    function usePrevious(value) {   //used to store the previous search\r\n        const ref = useRef();\r\n        useEffect(() => {\r\n          ref.current = value;\r\n        }, [value]);\r\n        return ref.current;\r\n      }\r\n\r\n    const newSearch = (e) => {          //searches if enter is pressed, page number only changes if the search is different than the previous one.\r\n        if (e.key === \"Enter\"){ \r\n            if (search === prevSearch){\r\n                getMovie();\r\n            }\r\n            else {\r\n                getMovie();\r\n                rows = [];\r\n                setPageNumber(1);\r\n            }\r\n        }\r\n    }\r\n    const onInputChange = e => {        //changes the search state every time a new key is pressed in the search bar\r\n        setSearch(e.target.value);\r\n    }\r\n\r\n    function TablePaginationActions(){     //adds the buttons next page and previous page\r\n        \r\n        const classes = useStyles();\r\n        const theme = useTheme();\r\n\r\n        return (\r\n            <div className={classes.root}>              \r\n                <IconButton onClick={decreasePage} disabled={pageNumber === 1} aria-label=\"previous page\">\r\n                    {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n                </IconButton>\r\n                <IconButton\r\n                    onClick={increasePage}\r\n                    disabled={nextPageData === false}\r\n                    aria-label=\"next page\">\r\n                    {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n                </IconButton>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function checkData(movie){\r\n        if(movie.Response === \"True\" && visible === true){\r\n            return(\r\n                <Box className=\"Box\" display=\"flex\" flexDirection=\"row\" justifyContent=\"center\">       {/* Adds flex to the website for mobile support */}\r\n                    <TableContainer className ={Table} component={Paper}>\r\n                        <Table className={Table} aria-label=\"simple table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell componenet=\"th\" scope=\"row\"><b>Movie Name</b></TableCell>\r\n                                    <TableCell style={{width: 125 }} align=\"left\"><b>Release Year</b></TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                            {(rowsPerPage > 0\r\n                                ? rows.slice((pageNumber-1) * rowsPerPage, (pageNumber-1) * rowsPerPage + rowsPerPage)\r\n                                : rows\r\n                                ).map((row) => ( \r\n                                <TableRow hover onClick={(event) => handleRowClick(event,row)} key={row.imdbID}>\r\n                                    <TableCell componenet=\"th\" scope=\"row\">\r\n                                        {row.Title}\r\n                                    </TableCell>\r\n                                    <TableCell style={{width: 125}} align=\"center\">{row.Year} </TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                            </TableBody>\r\n                            <TableFooter>\r\n                                <TableRow>\r\n                                    <TablePagination\r\n                                        rowsPerPageOptions = {[5, 10, {label: 'All', value: -1}]}\r\n                                        count={rows.length}\r\n                                        rowsPerPage={rowsPerPage}\r\n                                        page={pageNumber-1}\r\n                                        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                                        ActionsComponent={TablePaginationActions}\r\n                                        />\r\n                                </TableRow>\r\n                            </TableFooter>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Box>\r\n            );\r\n        }\r\n        else if (movie.Response === \"True\"){\r\n            return(\r\n                <div className=\"movieResponse\">\r\n                    <h2 className=\"Title\">{movie.Title}</h2>\r\n                    <img className = 'poster' src={movie.Poster} alt=\"\"  />\r\n                    <p className=\"Genre\"><u><b>Genre:</b></u> {movie.Genre}</p>\r\n                    <p className=\"Director\"><u><b>Director:</b></u> {movie.Director}</p>\r\n                    <p className=\"Rated\"><b><u>Rating</u>:</b> {movie.Rated}</p>\r\n                    <p className=\"imdbRating\"><b><u>IMDBRating</u>:</b> {movie.imdbRating}</p>\r\n                    <p className=\"boxOffice\"><b><u>Box Office:</u></b> {movie.BoxOffice}</p>\r\n                    <p className =\"goBack\" onClick={getMovie}> Back to Search</p>\r\n                </div>\r\n            );\r\n        }\r\n        return(\r\n            <p></p>\r\n        );\r\n    }\r\n\r\n    return(\r\n     <div className = \"App\">\r\n         <header>\r\n             <h1>Movie App</h1>\r\n         </header>\r\n        <section className = \"search\">\r\n            <input className = \"searchBox\" type=\"text\" placeholder = \"Search for a movie...\" value={search} onKeyPress={newSearch} onChange={onInputChange}/>       \r\n        </section>\r\n        {visible && checkData(movie)}\r\n        {!visible && checkData(movieInstance)}\r\n     </div>\r\n    );\r\n}\r\n\r\nexport default App;","import ReactDOM from 'react-dom'\r\nimport React from 'react'\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <App/>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}